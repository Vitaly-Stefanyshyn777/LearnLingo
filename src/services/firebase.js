import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getDatabase, ref, set, get, update, remove } from "firebase/database";

// üîπ Firebase –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const firebaseConfig = {
  apiKey: "AIzaSyCxPfvb-4sRst0qGBJ10QNX7rl4hDV-kas",
  authDomain: "learnlingo-7da97.firebaseapp.com",
  projectId: "learnlingo-7da97",
  storageBucket: "learnlingo-7da97.appspot.com",
  messagingSenderId: "1047555671913",
  appId: "1:1047555671913:web:8360c4de6914f3ad2a9ff8",
  measurementId: "G-7J1X7KSK58",
  databaseURL: "https://learnlingo-7da97-default-rtdb.firebaseio.com/",
};

// üîπ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Firebase
const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
export const db = getDatabase(app);

/**
 * üîπ –î–æ–¥–∞—î –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ —É –±–∞–∑—É
 * @param {Array} teachers - –ú–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤
 */
export const addTeachersToDatabase = async (teachers) => {
  const updates = {};
  teachers.forEach((teacher) => {
    const id = teacher.id || crypto.randomUUID();
    updates[`teachers/${id}`] = { ...teacher, id };
  });

  try {
    await update(ref(db), updates);
  } catch (error) {
    // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –±–µ–∑ –≤–∏–≤–æ–¥—É –≤ –∫–æ–Ω—Å–æ–ª—å
  }
};

/**
 * üîπ –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ —ñ–∑ Firebase
 * @returns {Promise<Array>} –ú–∞—Å–∏–≤ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤
 */
export const getTeachers = async () => {
  try {
    const snapshot = await get(ref(db, "teachers"));
    if (!snapshot.exists()) {
      return [];
    }
    return Object.entries(snapshot.val()).map(([id, teacher]) => ({ id, ...teacher }));
  } catch (error) {
    return [];
  }
};

/**
 * üîπ –ü–µ—Ä–µ–º–∏–∫–∞—î —Å—Ç–∞–Ω "–æ–±—Ä–∞–Ω–æ–≥–æ" –≤–∏–∫–ª–∞–¥–∞—á–∞ (–¥–æ–¥–∞—î –∞–±–æ –≤–∏–¥–∞–ª—è—î)
 * @param {string} userId - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param {Object} teacher - –û–±'—î–∫—Ç –≤–∏–∫–ª–∞–¥–∞—á–∞
 */
export const toggleFavorite = async (userId, teacher) => {
  if (!teacher || !teacher.id) return;

  try {
    const userRef = ref(db, `users/${userId}/favorites/${teacher.id}`);
    const snapshot = await get(userRef);

    if (snapshot.exists()) {
      await remove(userRef); // –í–∏–¥–∞–ª—è—î–º–æ, —è–∫—â–æ –≤–∂–µ –≤ –æ–±—Ä–∞–Ω–∏—Ö
    } else {
      await set(userRef, {
        id: teacher.id,
        name: teacher.name || "Unknown",
        avatar_url: teacher.avatar_url || null,
        languages: teacher.languages || [],
        levels: teacher.levels || [],
        price_per_hour: teacher.price_per_hour || "N/A",
        rating: teacher.rating || 0,
        lesson_info: teacher.lesson_info || "No info available",
        conditions: teacher.conditions || [],
        reviews: teacher.reviews || [],
        experience: teacher.experience || "No experience provided", // –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ Experience
      });
    }
  } catch (error) {
    // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –±–µ–∑ –≤–∏–≤–æ–¥—É –≤ –∫–æ–Ω—Å–æ–ª—å
  }
};

/**
 * üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤–∏–∫–ª–∞–¥–∞—á —É —Å–ø–∏—Å–∫—É "–æ–±—Ä–∞–Ω–∏—Ö"
 * @param {string} userId - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param {string} teacherId - ID –≤–∏–∫–ª–∞–¥–∞—á–∞
 * @returns {Promise<boolean>}
 */
export const isFavorite = async (userId, teacherId) => {
  try {
    const userRef = ref(db, `users/${userId}/favorites/${teacherId}`);
    const snapshot = await get(userRef);
    return snapshot.exists();
  } catch (error) {
    return false;
  }
};

/**
 * üîπ –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param {string} userId - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @returns {Promise<Array>} –ú–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤
 */
export const getFavoriteTeachers = async (userId) => {
  try {
    const snapshot = await get(ref(db, `users/${userId}/favorites`));
    if (!snapshot.exists()) return [];

    // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç–∏ —É –º–∞—Å–∏–≤, —Ñ—ñ–ª—å—Ç—Ä—É—é—á–∏ –Ω–µ–ø–æ–≤–Ω—ñ –∑–∞–ø–∏—Å–∏
    const favoriteTeachers = Object.values(snapshot.val()).filter(teacher => teacher && teacher.id && teacher.name);

    return favoriteTeachers.map(teacher => ({
      ...teacher,
      avatar_url: teacher.avatar_url || "https://via.placeholder.com/100", // ‚úÖ –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
    }));
  } catch (error) {
    return [];
  }
};
